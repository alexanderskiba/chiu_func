object AnonFuncs extends App {

  def partial1[A,B,C](a: A, f: (A,B) => C): B => C =
  // имеет три типа параметров и принимает два аргумента
  // аргумент f - функция, которая принимае тдва аргумента типов A и B и возвращает нам зачение типа C
    (b:B) => f(a, b)

  // Exercise 2.3
  // Дана функция, которая конвертирует фунцию f с двумя вргументами в функцию с одним аргументом

  def curry[A, B, C](f: (A, B) => C): A => (B => C) =
    // взять аргумент типа A, вернуть функцию типа B => C, эта функция принимает аргумент типа B и возвращает
    //значение типа C
    (a:A) => (b:B) => f(a, b)

  // Exercise 2.4
  def uncurry[A, B, C](f: A => B =>C): (A, B) => C =
    (a: A, b: B) => f(a)(b)

  // Exercise 2.5

  def compose[A,B,C] (f: B => C, g: A => B): A => C =
    (a:A) => f(g(a))

}
